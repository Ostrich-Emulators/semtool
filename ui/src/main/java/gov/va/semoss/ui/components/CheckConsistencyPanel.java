/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gov.va.semoss.ui.components;

import gov.va.semoss.rdf.engine.api.IEngine;
import gov.va.semoss.rdf.engine.util.QaChecker;
import gov.va.semoss.rdf.engine.util.QaChecker.CacheType;
import gov.va.semoss.ui.components.renderers.LabeledPairRenderer;
import gov.va.semoss.util.DoubleMetaphoneDistance;
import gov.va.semoss.util.MetaphoneDistance;
import gov.va.semoss.util.MultiMap;
import gov.va.semoss.util.SoundexDistance;
import gov.va.semoss.util.Utility;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import org.apache.log4j.Logger;
import org.apache.lucene.search.spell.LevensteinDistance;
import org.apache.lucene.search.spell.StringDistance;
import org.openrdf.model.URI;

/**
 *
 * @author ryan
 */
public final class CheckConsistencyPanel extends javax.swing.JPanel {

	private static final Logger log = Logger.getLogger(CheckConsistencyPanel.class );
	private final List<URI> conceptmodellist = new ArrayList<>();
	private final List<URI> relationmodellist = new ArrayList<>();
	private final LabeledPairRenderer<URI> crenderer = LabeledPairRenderer.getUriPairRenderer();
	private final LabeledPairRenderer<URI> rrenderer = LabeledPairRenderer.getUriPairRenderer();
	private final DefaultComboBoxModel<StringDistance> distancemodel = new DefaultComboBoxModel<>();

	public CheckConsistencyPanel() {
		initComponents();
		conceptList.setCellRenderer( crenderer );
		relationList.setCellRenderer( rrenderer );
		LabeledPairRenderer<StringDistance> arend = new LabeledPairRenderer<>();
		algorithm.setRenderer( arend );

		Map<StringDistance, String> dists = new LinkedHashMap<>();
		dists.put( new LevensteinDistance(), "Levenstein" );
		dists.put( new DoubleMetaphoneDistance(), "Double Metaphone" );
		dists.put( new MetaphoneDistance(), "Metaphone" );
		dists.put( new SoundexDistance(), "Soundex" );
		arend.cache( dists );
		
		for( StringDistance s : dists.keySet() ){
			algorithm.addItem( s );
		}
	}

	public CheckConsistencyPanel( boolean selNodes, boolean selRels ) {
		this();
		selectNodes( selNodes );
		selectRels( selRels );
	}

	public void setEngine( IEngine eng ) {
		QaChecker checker = new QaChecker( eng );
		
		conceptmodellist.clear();
		relationmodellist.clear();

		crenderer.clearCache();
		rrenderer.clearCache();

		Map<URI, String> cs = MultiMap.lossyflip( checker.getCache( CacheType.CONCEPTCLASS ) );
		cs = Utility.sortUrisByLabel( cs );

		Map<URI, String> rs = MultiMap.lossyflip( checker.getCache( CacheType.RELATIONCLASS ) );
		rs = Utility.sortUrisByLabel( rs );
		
		checker.release();

		conceptmodellist.addAll( cs.keySet() );
		relationmodellist.addAll( rs.keySet() );

		rrenderer.cache( cs );
		crenderer.cache( rs );

		UriModel.class.cast( conceptList.getModel() ).fire( conceptList );
		UriModel.class.cast( relationList.getModel() ).fire( relationList );
	}

	public StringDistance getDistanceAlg() {
		return algorithm.getItemAt( algorithm.getSelectedIndex() );
	}

	public boolean isNodesSelected() {
		return doConcepts.isSelected();
	}

	public boolean isRelsSelected() {
		return doRels.isSelected();
	}

	public boolean isCheckAcrossSelected() {
		return checkAcross.isSelected();
	}

	public List<URI> getSelectedNodes() {
		return conceptList.getSelectedValuesList();
	}

	public List<URI> getSelectedRelations() {
		return relationList.getSelectedValuesList();
	}

	public int getPercentage() {
		return minDistance.getValue();
	}

	public void setPercentage( int pct ) {
		if ( pct < minDistance.getMinimum() && pct > minDistance.getMaximum() ) {
			log.warn( pct + " outside the range of the slider" );
			pct = ( minDistance.getMinimum() + minDistance.getMaximum() ) / 2;
		}

		minDistance.setValue( pct );
	}

	public void selectRels( boolean b ) {
		doRels.setSelected( b );
	}

	public void selectNodes( boolean b ) {
		doConcepts.setSelected( b );
	}

	public void selectAcross( boolean b ) {
		checkAcross.setSelected( b );
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings( "unchecked" )
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    doConcepts = new javax.swing.JCheckBox();
    jScrollPane3 = new javax.swing.JScrollPane();
    conceptList = new javax.swing.JList<URI>();
    jPanel2 = new javax.swing.JPanel();
    jScrollPane4 = new javax.swing.JScrollPane();
    relationList = new javax.swing.JList<URI>();
    doRels = new javax.swing.JCheckBox();
    checkAcross = new javax.swing.JCheckBox();
    minDistance = new javax.swing.JSlider();
    jLabel1 = new javax.swing.JLabel();
    algorithm = new javax.swing.JComboBox<StringDistance>();
    jLabel2 = new javax.swing.JLabel();

    doConcepts.setSelected(true);
    doConcepts.setText("Nodes");
    doConcepts.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        doConceptsActionPerformed(evt);
      }
    });

    conceptList.setModel(new UriModel( conceptmodellist ));
    jScrollPane3.setViewportView(conceptList);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(doConcepts, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGap(0, 0, 0)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(doConcepts)
          .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(0, 0, 0))
    );

    relationList.setModel(new UriModel( relationmodellist ));
    jScrollPane4.setViewportView(relationList);

    doRels.setSelected(true);
    doRels.setText("Relationships");
    doRels.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        doRelsActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(doRels, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane4))
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addGap(0, 0, 0)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(doRels)
          .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(0, 0, 0))
    );

    checkAcross.setText("Check Across Types");

    minDistance.setMajorTickSpacing(10);
    minDistance.setMinimum(70);
    minDistance.setMinorTickSpacing(5);
    minDistance.setPaintLabels(true);
    minDistance.setPaintTicks(true);
    minDistance.setValue(92);

    jLabel1.setText("Similarity Percentage");

    algorithm.setModel(distancemodel);

    jLabel2.setText("Similarity Algorithm");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(checkAcross)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel1)
              .addComponent(jLabel2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(algorithm, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(minDistance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(checkAcross)
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(minDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(algorithm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2))
        .addGap(0, 15, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void doConceptsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doConceptsActionPerformed
		conceptList.setEnabled( doConcepts.isSelected() );
  }//GEN-LAST:event_doConceptsActionPerformed

  private void doRelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doRelsActionPerformed
		relationList.setEnabled( doRels.isSelected() );
  }//GEN-LAST:event_doRelsActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox<StringDistance> algorithm;
  private javax.swing.JCheckBox checkAcross;
  private javax.swing.JList<URI> conceptList;
  private javax.swing.JCheckBox doConcepts;
  private javax.swing.JCheckBox doRels;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JSlider minDistance;
  private javax.swing.JList<URI> relationList;
  // End of variables declaration//GEN-END:variables

	private class UriModel extends DefaultListModel<URI> {

		private final List<URI> data;

		public UriModel( List<URI> data ) {
			this.data = data;
		}

		@Override
		public int getSize() {
			return data.size();
		}

		@Override
		public URI getElementAt( int index ) {
			return data.get( index );
		}

		public void fire( JList<URI> list ) {
			fireContentsChanged( list, 0, conceptmodellist.size() );
		}
	}
}

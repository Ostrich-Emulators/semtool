/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gov.va.semoss.ui.components;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import org.apache.commons.io.FilenameUtils;

/**
 *
 * @author ryan
 */
public class FileBrowsePanel extends javax.swing.JPanel {

	private Preferences prefs = null;
	private String prefkey = null;
	private String initloc = null;
	private final JFileChooser chsr = new JFileChooser();
	private boolean showSaveDialog = false;
	private static final String NOT_HERE = "not-here-key";

	/**
	 * Creates new form FPP
	 */
	public FileBrowsePanel() {
		initComponents();

		chsr.setFileView( new SemossFileView() );

		btn.addActionListener( new ActionListener() {

			@Override
			public void actionPerformed( ActionEvent e ) {
				String loc;
				if ( !( null == area.getText() || area.getText().isEmpty() ) ) {
					loc = area.getText();
				}
				else {
					loc = ( null == prefs ? "." : prefs.get( prefkey, initloc ) );
				}

				chsr.setCurrentDirectory( new File( loc ) );
				int retval = ( showSaveDialog ? chsr.showSaveDialog( area ) : chsr.
						showOpenDialog( area ) );
				if ( JFileChooser.APPROVE_OPTION == retval ) {
					List<File> files = new ArrayList<>();
					if ( chsr.isMultiSelectionEnabled() ) {
						files.addAll( Arrays.asList( chsr.getSelectedFiles() ) );
					}
					else {
						files.add( chsr.getSelectedFile() );
					}
					loc = files.get( 0 ).getParentFile().getAbsolutePath();

					if ( null != prefs ) {
						prefs.put( prefkey, loc );
					}

					StringBuilder text = new StringBuilder();
					for ( File f : files ) {
						if ( text.length() > 0 ) {
							text.append( ";" );
						}
						text.append( f.getAbsolutePath() );
					}
					area.setText( text.toString() );
				}
			}
		} );
	}

	/**
	 * Saves the current location to the preferences. This function is useful if
	 * the caller wants to save a location different from the files selected. In
	 * most cases, this function will not need to be called directly, as the
	 * location is saved when thebutton's file chooser is accepted, or some
	 * variant of {@link #getFilePaths()} is called.
	 */
	public void remember() {
		remember( area.getText() );
	}

	/**
	 * Remembers a specific location. In most cases, this function will not need
	 * to be called.
	 *
	 * @param val the location to remember
	 */
	public void remember( String val ) {
		if ( null != prefs ) {
			if ( !( null == val || val.isEmpty() ) ) {
				prefs.put( prefkey, val );
			}
		}
	}

	/**
	 * Use the save dialog when the button is pushed, or the open dialog?
	 *
	 * @param b use the save dialog
	 */
	public void setShowSaveDialog( boolean b ) {
		showSaveDialog = b;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    btn = new javax.swing.JButton();
    area = new javax.swing.JTextField();

    btn.setText("Browse");
    btn.setToolTipText("Search your computer for the import file(s)");
    btn.setMargin(new java.awt.Insets(2, 4, 2, 4));
    btn.setMaximumSize(null);

    area.setToolTipText("Selected files");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(btn, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(area, javax.swing.GroupLayout.DEFAULT_SIZE, 7, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
        .addComponent(btn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(area, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextField area;
  private javax.swing.JButton btn;
  // End of variables declaration//GEN-END:variables

	public void setMultipleFilesOk( boolean b ) {
		chsr.setMultiSelectionEnabled( b );
	}

	public void setFileText( File f ) {
		area.setText( f.getAbsolutePath() );
	}

	public void setFileText( Collection<File> files ) {
		StringBuilder sb = new StringBuilder();
		for ( File f : files ) {
			if ( 0 != sb.length() ) {
				sb.append( ";" );
			}
			sb.append( f.getAbsolutePath() );
		}
		area.setText( sb.toString() );
	}

	public void addDocumentListener( DocumentListener dl ) {
		area.getDocument().addDocumentListener( dl );
	}

	/**
	 * Sets the initial location for the file browser button based on the given
	 * preference
	 *
	 * @param p the preferences to search
	 * @param key the preference to look for. If no preference is found, the 
	 * location from {@link #getLocationForEmptyPref(java.util.prefs.Preferences,
	 * java.lang.String) }.
	 */
	public void setPreferencesKeys( Preferences p, String key ) {
		prefs = p;
		prefkey = key;		
		initloc = getLocationForEmptyPref( p, key ).getAbsolutePath();
	}

	/**
	 * Gets the location specified in the given preferences, or a suitable
	 * replacement if it doesn't (Documents" directory if it exists, or
	 * "user.home" if it doesn't)
	 *
	 * @param p the preferences to check
	 * @param key the key to look for
	 * @return the preference location, or a substitute if it doesn't exist
	 */
	public static File getLocationForEmptyPref( Preferences p, String key ) {
		String loc = p.get( key, NOT_HERE );
		File ret;
		if ( NOT_HERE.equals( loc ) ) {
			File userhome = new File( System.getProperty( "user.home" ) );
			File docdir = new File( userhome, "Documents" );
			ret = ( docdir.exists() ? docdir : userhome );
		}
		else {
			ret = new File( loc );
		}

		return ret;
	}

	public void setFileTextFromInit() {
		this.setFileText( new File( initloc ) );
	}

	public JFileChooser getChooser() {
		return chsr;
	}

	public Collection<File> getFiles() {
		List<File> files = new ArrayList<>();
		for ( String f : getFilePaths() ) {
			files.add( new File( f ) );
		}

		return files;
	}

	public String[] getFilePaths() {
		if ( null == getDelimitedPaths() || getDelimitedPaths().isEmpty() ) {
			return new String[]{};
		}

		String allpaths[] = area.getText().split( ";" );
		if ( allpaths.length > 0 ) {
			// remember the directory of the first file
			remember( FilenameUtils.getFullPath( allpaths[0] ) );
		}

		return allpaths;
	}

	public String getDelimitedPaths() {
		return area.getText();
	}

	public String getFirstPath() {
		String[] paths = getFilePaths();
		String ret = ( paths.length > 0 ? paths[0] : null );
		remember( ret );
		return ret;
	}

	public File getFirstFile() {
		String path = getFirstPath();
		return ( null == path ? null : new File( path ) );
	}

	public static CustomFileFilter getLoadingSheetsFilter( boolean includeCSVs ) {
		CustomFileFilter cff = new CustomFileFilter( "Loading Sheets", "xlsx", "xls" );
		if ( includeCSVs ) {
			cff.addSuffix( "csv" );
		}
		return cff;
	}

	public static CustomFileFilter getAllImportTypesFilter() {
		return new CustomFileFilter( "Importable Files", "xlsx", "xls",
				"csv", "ttl", "n3", "nt", "rdf" );
	}

	public static CustomFileFilter getInsightTypesFilter() {
		return new CustomFileFilter( "Insights Files", "properties", "prop",
				"ttl", "n3", "nt", "rdf" );
	}

	public static class CustomFileFilter extends FileFilter {

		private final String desc;
		private final Set<String> suffixes;

		public CustomFileFilter( String description, String... suffix ) {
			desc = description;
			suffixes = new HashSet<>( Arrays.asList( suffix ) );
		}

		public void addSuffix( String sfx ) {
			suffixes.add( sfx );
		}

		@Override
		public boolean accept( File f ) {
			if ( f.isDirectory() ) {
				return true;
			}

			String ext = FilenameUtils.getExtension( f.getName() ).toLowerCase();
			return suffixes.contains( ext );
		}

		@Override
		public String getDescription() {
			StringBuilder sb = new StringBuilder( desc );
			sb.append( " (" );
			boolean first = true;
			for ( String sfx : suffixes ) {
				if ( first ) {
					first = false;
				}
				else {
					sb.append( ", " );
				}
				sb.append( "*." ).append( sfx );
			}
			sb.append( ")" );

			return sb.toString();
		}
	}
}

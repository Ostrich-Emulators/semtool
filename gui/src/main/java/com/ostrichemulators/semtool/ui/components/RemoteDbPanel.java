/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ostrichemulators.semtool.ui.components;

import com.ostrichemulators.semtool.rdf.engine.impl.AbstractSesameEngine;
import com.ostrichemulators.semtool.rdf.engine.impl.SesameEngine;
import com.ostrichemulators.semtool.user.User;
import com.ostrichemulators.semtool.ui.components.renderers.LabeledPairRenderer;
import com.ostrichemulators.semtool.util.Constants;
import com.ostrichemulators.semtool.util.DIHelper;
import com.ostrichemulators.semtool.util.GuiUtility;
import com.ostrichemulators.semtool.web.io.DbInfo;
import com.ostrichemulators.semtool.web.io.SemtoolClientImpl;
import com.ostrichemulators.semtool.web.io.ServiceClient;
import com.ostrichemulators.semtool.web.io.SesameClientImpl;
import java.net.MalformedURLException;
import java.util.Properties;
import java.util.prefs.Preferences;
import javax.swing.DefaultListModel;
import org.apache.log4j.Logger;
import org.springframework.http.HttpStatus;
import org.springframework.web.client.HttpStatusCodeException;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

/**
 *
 * @author ryan
 */
public class RemoteDbPanel extends javax.swing.JPanel {

	private static final Logger log = Logger.getLogger( RemoteDbPanel.class );
	private final DefaultListModel model = new DefaultListModel();
	private final LabeledPairRenderer<DbInfo> render = new LabeledPairRenderer<>();
	private User user;
	private boolean semtooldialect = true;

	/**
	 * Creates new form RemoteDbPanel
	 */
	public RemoteDbPanel() {
		initComponents();
		dblist.setModel( model );
		dblist.setCellRenderer( render );

		Preferences prefs = Preferences.userNodeForPackage( getClass() );
		remoteurl.setText( prefs.get( "lastexturl", "http://" ) );
		username.setText( prefs.get( "lastusername", "" ) );
	}

	public void setSemtoolTarget( boolean issemtool ) {
		semtooldialect = issemtool;
	}

	public User getConnectedUser() {
		return user;
	}

	public Properties getConnectionProperties() throws MalformedURLException {
		DbInfo info = dblist.getSelectedValue();
		if ( null != info ) {
			Properties props = new Properties();
			props.setProperty( Constants.ENGINE_IMPL, SesameEngine.class.getCanonicalName() );

			props.setProperty( SesameEngine.REPOSITORY_KEY, info.getDataUrl() );
			if ( null != info.getInsightsUrl() ) {
				props.setProperty( SesameEngine.INSIGHTS_KEY, info.getInsightsUrl() );
			}
			props.setProperty( AbstractSesameEngine.REMOTE_KEY, Boolean.TRUE.toString() );
			props.setProperty( "username", user.getUsername() );
			props.setProperty( "password", new String( password.getPassword() ) );
			props.setProperty( Constants.ENGINE_NAME, info.getName() );

			return props;
		}
		return null;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings( "unchecked" )
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    jLabel4 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    username = new javax.swing.JTextField();
    password = new javax.swing.JPasswordField();
    connect = new javax.swing.JButton();
    jLabel1 = new javax.swing.JLabel();
    remoteurl = new javax.swing.JTextField();
    jPanel2 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    dblist = new javax.swing.JList<DbInfo>();

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Panel.background")), "Connection Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N

    jLabel4.setText("Password");

    jLabel3.setText("Username");

    connect.setText("Connect");
    connect.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        connectActionPerformed(evt);
      }
    });

    jLabel1.setText("Server URL");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(connect))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jLabel3)
                  .addGap(17, 17, 17)))
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(19, 19, 19)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(password, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
              .addComponent(username)
              .addComponent(remoteurl, javax.swing.GroupLayout.Alignment.TRAILING))))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGap(0, 0, 0)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jLabel1)
          .addComponent(remoteurl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jLabel3)
          .addComponent(username))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jLabel4)
          .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(connect)
        .addGap(0, 0, 0))
    );

    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Panel.background")), "Databases", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N

    dblist.setModel(model);
    dblist.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    dblist.setEnabled(false);
    jScrollPane1.setViewportView(dblist);

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
        .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addGap(0, 0, 0)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
        .addGap(0, 0, 0))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(0, 0, 0)
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(0, 0, 0)
        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
		model.clear();
		render.clearCache();
		user = null;
		dblist.setEnabled( false );

		RestTemplate rt = DIHelper.getInstance().getAppCtx().getBean( RestTemplate.class );
		String url = remoteurl.getText();
		ServiceClient rest = ( semtooldialect
				? new SemtoolClientImpl( rt, url )
				: new SesameClientImpl( rt, url ) );

		rest.setAuthentication( username.getText(), password.getPassword() );

		try {
			DbInfo dbs[] = rest.getDbs();

			Preferences prefs = Preferences.userNodeForPackage( getClass() );
			prefs.put( "lastexturl", url );
			prefs.put( "lastusername", username.getText() );

			for ( DbInfo i : dbs ) {
				render.cache( i, i.getName() );
				model.addElement( i );
			}
			dblist.setEnabled( true );

			user = rest.getUser();
		}
		catch ( HttpStatusCodeException hse ) {
			log.error( hse );
			HttpStatus status = hse.getStatusCode();
			if ( HttpStatus.UNAUTHORIZED == status ) {
				GuiUtility.showError( "Access Denied (invalid username/password?)" );
			}
			else if ( HttpStatus.NOT_FOUND == status ) {
				GuiUtility.showError( "The server URL was not found" );
			}
			else {
				GuiUtility.showError( "Server responded: (" + status.value() + ") "
						+ status.getReasonPhrase() );
			}
		}
		catch ( RestClientException ioe ) {
			log.error( ioe, ioe );
			GuiUtility.showError( "Connection to the server failed" );
		}
  }//GEN-LAST:event_connectActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton connect;
  private javax.swing.JList<DbInfo> dblist;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JPasswordField password;
  private javax.swing.JTextField remoteurl;
  private javax.swing.JTextField username;
  // End of variables declaration//GEN-END:variables
}
